/* Background images */

.img-background {
  background-size: cover;
  background-position: 50% 50%;
  background-repeat: no-repeat;
}

.img-background-100 {
  background-size: 100%;
  background-position: top left;
  background-repeat: no-repeat;
}

/* Text rules */

a.underline,
.underline {
  text-decoration: underline;
}

.ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.full-width {
  width: 100%;
}

.overflow-hidden {
  overflow: hidden;
}

.sub {
  vertical-align: sub;
}

/* Display helpers */

.block {
  display: block;
}

.relative {
  position: relative;
}

.inline {
  display: inline;
}

.inline-block {
  display: inline-block;
}

.static {
  position: static;
}

.center {
  display: inline-block;
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  vertical-align: middle;
}

/* Vertical positioning */

.vertical-center {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
}

.vertical-bottom {
  position: absolute;
  left: 50%;
  bottom: 0%;
  transform: translate(-50%, 0%);
  width: 100%;
}

.vertical-10 {
  position: absolute;
  left: 50%;
  top: 10%;
  transform: translate(-50%, -10%);
  width: 100%;
}

.vertical-20 {
  position: absolute;
  left: 50%;
  top: 20%;
  transform: translate(-50%, -20%);
  width: 100%;
}

.vertical-70 {
  position: absolute;
  left: 50%;
  top: 70%;
  transform: translate(-50%, -70%);
  width: 100%;
}

.vertical-80 {
  position: absolute;
  left: 50%;
  top: 80%;
  transform: translate(-50%, -80%);
  width: 100%;
}

.pointer {
  cursor: pointer;
}

.or-divider {
  margin-top: -41px;

  span {
    background: $cr-white;
    padding: 5px;
    vertical-align: middle;
  }
}

/* Border stuff */

.no-borders {
  border: 0px !important;
}

.border-bottom {
  border-bottom: 1px solid $gray-lighter;
}

.border-top {
  border-top: 1px solid $gray-lighter;
}

.border-sides {
  border-left: 1px solid $gray-lighter;
  border-right: 1px solid $gray-lighter;
}

.border-ends {
  border-top: 1px solid $gray-lighter;
  border-bottom: 1px solid $gray-lighter;
}

/* Corners */

.square-corners {
  border-radius: 0;
}

.round-corners {
  border-radius: $border-radius-base;
}

/* Stackable floats */

// Used for float and text-alignment functions
$device-sizes: (
  $screen-sm-min: "sm",
  $screen-md-min: "md",
  $screen-lg-min: "lg"
);

// ðŸš¨ $_floats-directions variable are only used in the creation of pull-left/-right classes
$_floats-directions: ("right", "left");

// For each defined screen-width, create a class/media query ($device-sizes)
@each $screen, $size in $device-sizes {

  // For each newly created class/media query, add a float-left and float-right rule ($_floats-direction)
  @each $direction in $_floats-directions {
    @media only screen and (min-width: $screen) {
      .#{$size}-pull-#{$direction} {
        float: #{$direction};
      }
    }
  }
}

/* Stackable text alignment */
// ðŸš¨ $_text-alignments variable are only used in the creation of text-align classes
$_text-alignments: ("right", "left", "center");

// For each defined screen-width, create a class/media query ($device-sizes)
@each $screen, $size in $device-sizes {

  // For each newly created class/media query, add each text-alignment rule ($_text-alignments)
  @each $align in $_text-alignments {
    @media only screen and (min-width: $screen) {
      .#{$size}-text-#{$align} {
        text-align: #{$align};
      }
    }
  }
}

// Empty href attributes for UI Bootstrap

.nav,
.pagination,
.carousel,
.panel-title a,
a[ng-click] {
  cursor: pointer;
}

.img-full-width {
  width: 100%;
  height: auto;
}

.img-full-size {
  width: 100%;
  height: 100%;
}

.absolute-cover {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

// Vertical Align
// Note: if the element is blurry, try putting transform-style: preserve-3d; on the parent
// Reference: http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/
@mixin vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

// Maintain Aspect Ratio

@mixin aspect-ratio($width, $height) {
  position: relative;

  &:before{
    display: block;
    content: " ";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > .aspect-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

.sixteen-nine {
  @include aspect-ratio(16,9);
}

/* Margin/Padding Rules */

// ðŸš¨ @mixin _spacing-* are only used in the creation of spacing classes (+/- padding/margin)
@mixin _spacing-mobile-mq {
  @media only screen and (max-width: $screen-sm-min) {
    @content;
  }
}
@mixin _spacing-ends($property, $value) {
  #{$property}-top: $value;
  #{$property}-bottom: $value;
}
@mixin _spacing-sides($property, $value) {
  #{$property}-right: $value;
  #{$property}-left: $value;
}

// ðŸš¨ $_spacing-* variables are only used in the creation of spacing classes (+/- padding/margin)
$_spacing-classes: (
  "push": "margin",
  "flush": "margin",
  "hard": "padding",
  "soft": "padding"
);
$_spacing-sides: (" ", "-top", "-right", "-bottom", "-left");

// Spacing classes -- start
// For each key/value in $_spacing-classes, create a class/rule and assign value to $value
@each $class, $property in $_spacing-classes {
  @if $class == "push" {
    $value: $line-height-computed !global;
  } @else if $class == "flush" {
    $value: 0 !global;
  } @else if $class == "hard" {
    $value: 0 !global;
  } @else if $class == "soft" {
    $value: $line-height-computed !global;
  }

  // For each class/rule created above, create a desktop and mobile class appending each side to the class/rule
  @each $side in $_spacing-sides {
    .#{$class}#{$side} {
      #{$property}#{$side} : $value;
    }
    .mobile-#{$class}#{$side} {
      @include _spacing-mobile-mq { #{$property}#{$side}: $value };
    }

    @if $value == $line-height-computed {
      .#{$class}-half#{$side} {
        #{$property}#{$side} : $value / 2;
      }
      .mobile-#{$class}-half#{$side} {
        @include _spacing-mobile-mq { #{$property}#{$side}: $value / 2 };
      }
      .#{$class}-quarter#{$side} {
        #{$property}#{$side} : $value / 4;
      }
      .mobile-#{$class}-quarter#{$side} {
        @include _spacing-mobile-mq { #{$property}#{$side}: $value / 4 };
      }
    }
  }

  .#{$class}-sides {
    @include _spacing-sides(#{$property}, $value);
  }
  .mobile-#{$class}-sides {
    @include _spacing-mobile-mq {
      #{$property}-right: $value;
      #{$property}-left: $value;
    };
  }
  .#{$class}-ends {
    @include _spacing-ends(#{$property}, $value);
  }
  .mobile-#{$class}-ends {
    @include _spacing-mobile-mq {
      #{$property}-top: $value;
      #{$property}-bottom: $value;
    };
  }

  @if $value == $line-height-computed {
    .#{$class}-half-sides {
      @include _spacing-sides(#{$property}, $value / 2);
    }
    .mobile-#{$class}-half-sides {
      @include _spacing-mobile-mq {
        #{$property}-right: $value / 2;
        #{$property}-left: $value / 2;
      };
    }
    .#{$class}-half-ends {
      @include _spacing-sides(#{$property}, $value / 2);
    }
    .mobile-#{$class}-half-ends {
      @include _spacing-mobile-mq {
        #{$property}-top: $value / 2;
        #{$property}-bottom: $value / 2;
      };
    }
  }
}
// Spacing classes -- end